plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.simplesqlgen'
version = '1.0.1'

repositories {
    mavenCentral()
}

dependencies {
    // AutoService for annotation processor registration
    implementation 'com.google.auto.service:auto-service:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'

    // Utilities for code generation
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'

    // Test dependencies
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    
    // Google Testing Compile for annotation processor testing
    testImplementation 'com.google.testing.compile:compile-testing:0.21.0'
    testAnnotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    
    // Add our own annotation processor to test compilation
    testAnnotationProcessor project(':')  // Reference to our own project
    
    // Spring dependencies for testing generated code
    testImplementation 'org.springframework:spring-jdbc:6.1.0'
    testImplementation 'org.springframework:spring-context:6.1.0'
}

compileJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    
    // Add JVM arguments to allow access to internal APIs for annotation processor testing
    jvmArgs = [
        '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
    ]
}

java {
    withSourcesJar()
}

// Generate empty Javadoc JAR ignoring errors
javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8' 
    options.docEncoding = 'UTF-8'
    options.addBooleanOption('Xdoclint:none', true)
    options.addBooleanOption('quiet', true)
    failOnError = false
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            artifact javadocJar
            
            pom {
                name = 'Simple SQL Generator'
                description = 'Compile-time SQL generation with zero runtime overhead for Java applications'
                url = 'https://github.com/simplesqlgen/simple-sql-generator'
                
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                
                developers {
                    developer {
                        id = 'simplesqlgen'
                        name = 'Simple SQL Generator Team'
                        email = 'contact@simplesqlgen.io'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/simplesqlgen/simple-sql-generator.git'
                    developerConnection = 'scm:git:ssh://github.com:simplesqlgen/simple-sql-generator.git'
                    url = 'https://github.com/simplesqlgen/simple-sql-generator'
                }
            }
        }
    }
    
    // Maven Central Portal uses direct upload method
    // Generate locally with ./gradlew publishAllPublicationsToMavenLocalRepository
    // Then manually upload to central.sonatype.com
}

signing {
    def keyId = findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
    def password = findProperty("signing.password") ?: ""
    
    if (System.getenv("CI")) {
        // GitHub Actions: 환경변수에서 키 사용
        def secretKey = System.getenv("GPG_PRIVATE_KEY")
        if (keyId && secretKey) {
            useInMemoryPgpKeys(keyId, secretKey, password)
            sign publishing.publications.maven
        }
    } else {
        // 로컬: 파일 기반 키 사용
        def keyFile = file("private.key")
        if (keyId && keyFile.exists()) {
            def secretKey = keyFile.text
            useInMemoryPgpKeys(keyId, secretKey, password)
            sign publishing.publications.maven
        }
    }
}

// Maven Central Portal deployment steps:
// 1. Generate GPG key: gpg --gen-key
// 2. Upload public key: gpg --keyserver keyserver.ubuntu.com --send-keys YOUR_KEY_ID
// 3. Configure gradle.properties:
//    signing.keyId=your_key_id
//    signing.password=your_key_password  
//    signing.secretKeyRingFile=~/.gnupg/secring.gpg
// 4. Local build: ./gradlew publishToMavenLocal
// 5. ZIP all files (.jar, .pom, .asc) from ~/.m2/repository/io/github/simplesqlgen/simple-sql-generator/1.0.0/
// 6. Upload ZIP file to central.sonatype.com